=== This template file contains questions you need to answer.
=== Fill your answers on appropriate blank lines only.
=== Don't start any line with three equal signs "===".
=== Don't edit any lines starting from three equal signs.
=== Use C notation to write numbers: 42 for decimal, 0x2a for hexadecimal.
=== We may check most of the answers automatically, so "forty two" or
=== "26+16" won't work for this example. Spaces are mostly ignored, so
=== "  42  " is OK (without quotes of course). 
=== When asked to specify address & instruction, do it in the form of
=== gdb output "ADDRESS: INSTRUCTION", for example "0x7c26:  or  $0x1,%eax"
=== Don't make lines longer than 80 characters. You don't need to fit your
=== answer in a single line, you can start a new line at will.


=== Q What is the number of the first port BIOS writes into?
0x70

=== Q What is the number of the first port BIOS reads from?
0x71

=== Q What device is probably accessed through above ports?
CMOS

=== Q What instruction causes processor to switch to 32-bit mode?
===   (specify address & instruction)
7c2d:	ljmp   $0xb866,$0x87c32

=== Q What's the instruction performed immediately after the processor
===   is switched to 32-bit mode? (address & instruction)
7c32:	mov    $0x10,%ax

=== Q What is the last instruction of boot loader? (address & instruction)
7d84:	call   *%eax

=== Q What is first instruction of the kernel? (address & instruction)
f010000c:	movw   $0x1234,0x472

=== Q Where boot loader finds information how many sectors it must
===   read in order to fetch the entire kernel from disk? 
===   (remove leading "====" from the correct answer line)
==== hard coded in boot loader
elf header
==== elf tail
==== gnome header
==== gnome tail
==== none of above

=== Q What C function in boot loader contains the logic of reading the
===   whole kernel? (not full function declaration, just the name)
readseg

=== Q What's the link address of .text section of the kernel?
0x0010000c

=== Q What's the entry point (start address) of the kernel?
0xf010000c

=== Q What are 4 words of memory at 0x100000 at the point the BIOS
===   enters the boot loader? (in the form WORD1 WORD2 WORD3 WORD4)
0x00000000 0x00000000 0x00000000 0x00000000

=== Q What are 4 words of memory at 0x100000 at the point the boot
===   loader enters the kernel? (in the form WORD1 WORD2 WORD3 WORD4)
0x1badb002 0x00000003 0xe4524ffb 0x7205c766

=== Q What's the first instruction which would "break" if you were to
===   get the boot loader's link address wrong? (address & instruction)
===   Check yourself by recompiling & debugging!
7c2d:	ljmp   $0xb866,$0x87c32

=== Q What's the first instruction after the kernel establishes a new
===   mapping that would fail to work properly if the old mapping were
===   still in place? (address & instruction)
f010002e:	mov    $0x0,%ebp

=== Q What functions from console.c are directly used by printf.c?
===   (just function names separated by spaces, not full declarations)
cputchar

=== Q What is the task of console.c lines 194-202?
===   (free form, up to 10 words)
To deal with the scenario where thecursor is off screen

===   Consider the code
===   	int x = 1, y = 3, z = 4;
===	cprintf("x %d, y %x, z %d\n", x, y, z);
===   executing inside cprintf function just after fmt and ap are
===   initialized (just before the call to vcprintf).

=== Q What's the contents of the first byte in memory pointed to by
===   fmt? (write this byte as a number)
120

=== Q What's the contents of the first byte in memory pointed to by
===   ap? (write this byte as a number)
001

===   Consider the code
===     unsigned int i = 0x00646c72;
===     cprintf("H%x Wo%s", 57616, &i);

=== Q What is the output of the code?
He110 World

=== Q To lead to the same output in big-endian architecture, what
===   should be the value of the second argument?
The second argument should point to the start of where i was allocated.

=== Q To lead to the same output in big-endian architecture, what
===   should be the value of i?
0x726c6400

=== Q What is printed after "y=" for cprintf("x=%d y=%d", 3)?
===   (free form, up to 10 words)
The value in the stack before '3'.

=== Q What instruction reserves space for kernel stack?
===   (address & instruction)
movl	$(bootstacktop),%esp

=== Q How many 32-bit words (i.e. bytes/4) does each recursive nesting
===   level of test_backtrace pushes on the stack?
8

